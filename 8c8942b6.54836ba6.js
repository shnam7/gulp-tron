(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{75:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return s})),n.d(t,"metadata",(function(){return i})),n.d(t,"rightToc",(function(){return r})),n.d(t,"default",(function(){return c}));var a=n(2),o=n(6),l=(n(0),n(99)),s={id:"auto-install",title:"Automatic Module Installation"},i={unversionedId:"getting-started/auto-install",id:"getting-started/auto-install",isDocsHomePage:!1,title:"Automatic Module Installation",description:"Node module dependency",source:"@site/docs\\getting-started\\03-auto-install.md",slug:"/getting-started/auto-install",permalink:"/gulp-tron/getting-started/auto-install",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/getting-started/03-auto-install.md",version:"current",sidebar:"docs",previous:{title:"Quick Start",permalink:"/gulp-tron/getting-started/quick-start"},next:{title:"Concept",permalink:"/gulp-tron/guide/concept"}},r=[{value:"Node module dependency",id:"node-module-dependency",children:[]},{value:"Automatic module installation",id:"automatic-module-installation",children:[{value:"Usiing Command line",id:"usiing-command-line",children:[]},{value:"Using API",id:"using-api",children:[]}]},{value:"Auto-install for users",id:"auto-install-for-users",children:[]}],u={rightToc:r};function c(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(l.b)("wrapper",Object(a.a)({},u,n,{components:t,mdxType:"MDXLayout"}),Object(l.b)("h2",{id:"node-module-dependency"},"Node module dependency"),Object(l.b)("p",null,"gulp-tron uses various node modulew, but most of them are not installed automatically becuase typically only parts of them are used depending on user's project requirements. To minimize the overhead on module dependency, gulp-tron tries to keep it's own dependency as small as possible. So, when you first try to use it, you could see many warnings like this:"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-sh"}),"[01:14:22] Starting '01-watcher:scss'...\n[01:14:22] '01-watcher:scss' errored after 48 ms\n[01:14:23] Error: Cannot find module 'gulp-sass'\nRequire stack:\n- D:\\dev\\pub\\gulp-tron\\lib\\plugins\\CSSPlugin.js\n...\n")),Object(l.b)("p",null,"If you see error messages like '",Object(l.b)("strong",{parentName:"p"},"Cannot find module..."),"', then you have to install the the missing modules required - 'gulp-sass' in this case. When you run gulp-tron for the first time, then you can see this error messages repeatedly for all the modules used by gulp-tron internally. To ease this inconvenience, gulp-tron provides automatic module installation options."),Object(l.b)("h2",{id:"automatic-module-installation"},"Automatic module installation"),Object(l.b)("p",null,"Automatic module installation option is off by default because it would degrade build task execution performance checking module installation status. If this option is turned on, all the modules used by gulp-tron will be automatically instsalled and the package.json file will be updated as per the given installation options (default: '--save-dev'). Once all the required modules are installed, this option can be turned off to skip unnecessary module availablity checking. If moduels are already installed, installation action is skipped."),Object(l.b)("p",null,"gulp-tron provides two ways of enabling automatic module installation."),Object(l.b)("h3",{id:"usiing-command-line"},"Usiing Command line"),Object(l.b)("p",null,"If --npm-auto-install (--npm-auto for short) option is given to gulp in command line, automatic installation option is enabled.\nOptionally, you can specify package manager and installation options to the package manager."),Object(l.b)("p",null,"Here are some examples:"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-sh"}),"npx gulp task1 --npm-auto       # default package manager is npm, install option is '--save-dev'\nnpx gulp task1 --npm-auto=npm   # the same ase above\nnpx gulp task1 --npm-auto=pnpm  # set package to pnpm with default install option '--save-dev'\nnpx gulp task1 --npm-auto=yarn  # set package to yarn with default install option '--dev'\nnpx gulp task1 --npm-auto=--no-save # default package manager is npm, set install option to '--np-save'\nnpx gulp task1 --npm-auto=\"pnpm add --no-save\"  # custom install command: need full install command\n")),Object(l.b)("h3",{id:"using-api"},"Using API"),Object(l.b)("p",null,"Using tron.setPackageManager(options), automatic installation options can be turned on or off. In addition, package manager can also be selected with preferred install options."),Object(l.b)("p",null,"Usage examples"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const tron = require('gulp-tron');\n\n// default package manager is npm, install option is '--save-dev'\ntron.setPackageManager({autoInstall: true});\n\n// default package manager is npm, set install option to '--save'\ntron.setPackageManager({autoInstall: true, installOptions='--save'});\n\n// set package manager to pnpm, install option is set to default, '--save-dev'\ntron.setPackageManager({name: 'pnpm', autoInstall: true});\n\n// set package manager to yarn, install option is set to default, '--dev'\ntron.setPackageManager({name: 'yarn', autoInstall: true});\n")),Object(l.b)("h5",{id:"optionsname"},"options.name"),Object(l.b)("p",null,"Package manager name. If known package manager is specified alone, options.installOptions is set to defaults according."),Object(l.b)("p",null,"Currently, npm, pnpm, yarn are known package manager names."),Object(l.b)("h4",{id:"optionsinstalloptions"},"options.installOptions"),Object(l.b)("p",null,"Options to install command. Default is '--save-dev' for npm and pnpm. '--dev' for yarn."),Object(l.b)("h4",{id:"optionsautoinstall"},"options.autoInstall"),Object(l.b)("p",null,"Enable or disable automatic module installion. default is false."),Object(l.b)("h2",{id:"auto-install-for-users"},"Auto-install for users"),Object(l.b)("p",null,"Using tron.require() function and npmInstall property of BuildConfig, modules required in gulpfile can be installed automatically."),Object(l.b)("p",null,"Usage example:"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const scss = {\n    name: 'scss',\n    builder: (rtb) => {\n        const sass = tron.require('gulp-sass');\n        rtb.src().pipe(sass().on('error', sass.logError)).dest();\n    },\n    src: 'assets/scss/**/*.scss',\n    dest: 'www/css',\n    clean: 'www/css'\n}\n\nconst scripts = {\n    name: 'babel',\n    builder: (rtb) => rtb.src().pipe(require('gulp-babel')()).dest(),\n    buildOptions: { babel: true },\n    src: 'assets/js/**/*.js',\n    dest: 'www/js',\n    clean: 'www/js',\n    npmInstall: ['gulp-babel', '@babel/core']     // packages to be installed before build execution\n}\n\n")),Object(l.b)("p",null,"Note that modules specified in BuildConfig.npmInstall are installed when the build item is executed, not gulp is loaded. However, tron.require() will install the required module when it's called. So, if it is called inside the build function, the required module will be installed only when the task is executed, not when the gulpfile is loaded."))}c.isMDXComponent=!0},99:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return b}));var a=n(0),o=n.n(a);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var u=o.a.createContext({}),c=function(e){var t=o.a.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return o.a.createElement(u.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},m=o.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,s=e.parentName,u=r(e,["components","mdxType","originalType","parentName"]),p=c(n),m=a,b=p["".concat(s,".").concat(m)]||p[m]||d[m]||l;return n?o.a.createElement(b,i(i({ref:t},u),{},{components:n})):o.a.createElement(b,i({ref:t},u))}));function b(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,s=new Array(l);s[0]=m;var i={};for(var r in t)hasOwnProperty.call(t,r)&&(i[r]=t[r]);i.originalType=e,i.mdxType="string"==typeof e?e:a,s[1]=i;for(var u=2;u<l;u++)s[u]=n[u];return o.a.createElement.apply(null,s)}return o.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"}}]);