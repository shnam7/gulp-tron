(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{118:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return m}));var r=n(0),a=n.n(r);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var o=a.a.createContext({}),u=function(e){var t=a.a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=u(e.components);return a.a.createElement(o.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},d=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,i=e.parentName,o=c(e,["components","mdxType","originalType","parentName"]),p=u(n),d=r,m=p["".concat(i,".").concat(d)]||p[d]||b[d]||s;return n?a.a.createElement(m,l(l({ref:t},o),{},{components:n})):a.a.createElement(m,l({ref:t},o))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,i=new Array(s);i[0]=d;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var o=2;o<s;o++)i[o]=n[o];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},65:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return l})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return u}));var r=n(2),a=n(6),s=(n(0),n(118)),i={id:"quick-start",title:"Quick Start"},l={unversionedId:"getting-started/quick-start",id:"getting-started/quick-start",isDocsHomePage:!1,title:"Quick Start",description:"Let's create a single page website with scss and javascript/babel support. The project directory would look like this.",source:"@site/docs\\getting-started\\02-quick-start.md",slug:"/getting-started/quick-start",permalink:"/gulp-tron/getting-started/quick-start",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/getting-started/02-quick-start.md",version:"current",sidebar:"docs",previous:{title:"Installation",permalink:"/gulp-tron/"},next:{title:"Automatic Module Installation",permalink:"/gulp-tron/getting-started/auto-install"}},c=[{value:"Package install",id:"package-install",children:[]},{value:"Gulpfile.js",id:"gulpfilejs",children:[]},{value:"Automatic module installation",id:"automatic-module-installation",children:[]},{value:"Custom build functions",id:"custom-build-functions",children:[]}],o={rightToc:c};function u(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(s.b)("wrapper",Object(r.a)({},o,n,{components:t,mdxType:"MDXLayout"}),Object(s.b)("p",null,"Let's create a single page website with scss and javascript/babel support. The project directory would look like this."),Object(s.b)("pre",null,Object(s.b)("code",Object(r.a)({parentName:"pre"},{className:"language-sh"}),"my-website # Root directory of your site\n\u251c\u2500\u2500 assets\n\u2502   \u251c\u2500\u2500 js\n\u2502   \u2502   \u2514\u2500\u2500 main.js\n\u2502   \u2514\u2500\u2500 scss\n\u2502       \u2514\u2500\u2500 style.scss\n\u251c\u2500\u2500 www\n\u2502   \u251c\u2500\u2500 js\n\u2502   \u2502   \u2514\u2500\u2500 main.js\n\u2502   \u251c\u2500\u2500 css\n\u2502   \u2502   \u2514\u2500\u2500 style.css\n\u2502   \u2514\u2500\u2500 index.html\n\u251c\u2500\u2500 gulpfile.js\n\u2514\u2500\u2500 package.json\n")),Object(s.b)("h2",{id:"package-install"},"Package install"),Object(s.b)("p",null,"First, install gulp and gulp-tron using npm command."),Object(s.b)("pre",null,Object(s.b)("code",Object(r.a)({parentName:"pre"},{className:"language-sh"}),"npm i gulp gulp-tron --save-dev\n")),Object(s.b)("h2",{id:"gulpfilejs"},"Gulpfile.js"),Object(s.b)("p",null,"Now let's create a gulpfile.js in the project root directory with following contents."),Object(s.b)("pre",null,Object(s.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"const tron = require('gulp-tron');\n\ntron.setPackageManager({autoInstall: true});\n\nconst scss = {\n    name: 'scss',\n    builder: 'GCSSBuilder',\n    src: 'assets/scss/**/*.scss',\n    dest: 'www/css',\n    clean: 'www/css'\n}\n\nconst scripts = {\n    name: 'babel',\n    builder: 'GJavaScriptBuilder',\n    buildOptions: { babel: true },  // enable babel. Option to 'GJavaScriptBuilder'\n    src: 'assets/js/**/*.js',\n    dest: 'www/js',\n    clean: 'www/js'\n}\n\nconst build = {\n    name: '@build',\n    dependencies: tron.parallel(scss, scripts)\n}\n\n\ntron.createProject(build).addCleaner().addWatcher({\n    watch: ['www/**/*.html'],\n    browserSync: { server: 'www' }\n});\n")),Object(s.b)("p",null,"This configuration will create following 5 gulp tasks with browser reloading support:"),Object(s.b)("ul",null,Object(s.b)("li",{parentName:"ul"},"scss: transpile scss files into css files"),Object(s.b)("li",{parentName:"ul"},"babel: transpile javascript with babel support"),Object(s.b)("li",{parentName:"ul"},"@build: execute 'scss' and 'babel' tasks in parallel"),Object(s.b)("li",{parentName:"ul"},"@clean: clean all the files or directories specified in 'clean' properties of each configurations"),Object(s.b)("li",{parentName:"ul"},"@watch: start watch for all the targets specified in 'src' properties of each configurations, and additional target specified by watch property in options to tron.addWatch() function.")),Object(s.b)("h2",{id:"automatic-module-installation"},"Automatic module installation"),Object(s.b)("p",null,"tron.setPackageManager() function can be invoked to enable automatic dependent modules installation. Default package manager is 'npm', but it can be change to 'yarn' or 'pnpm' using 'name' property in the option.\n'autoInstall' option is off by default."),Object(s.b)("h2",{id:"custom-build-functions"},"Custom build functions"),Object(s.b)("p",null,"gulp-tron provides various built-in builders such as 'GCSSBuilder' or 'GJavaScriptBuilder'. But if custom build functions are prefered, it can be done like this."),Object(s.b)("pre",null,Object(s.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"const scss = {\n    name: 'scss',\n    builder: (rtb) => {\n        const sass = tron.require('gulp-sass');\n        rtb.src().pipe(sass().on('error', sass.logError)).dest();\n    },\n    src: 'assets/scss/**/*.scss',\n    dest: 'www/css',\n    clean: 'www/css'\n}\n\nconst scripts = {\n    name: 'babel',\n    builder: (rtb) => rtb.src().pipe(tron.require('gulp-babel')()).dest(),\n    buildOptions: { babel: true },\n    src: 'assets/js/**/*.js',\n    dest: 'www/js',\n    clean: 'www/js',\n    npmInstall: ['@babel/core']     // packages to be installed before build execution\n}\n\n")),Object(s.b)("p",null,"Required node modules can be installed before each build execution using 'npmInstall' proptery. Or, tron.require() function can be used to install the required module automatically when the 'autoInstall' option is enabled."))}u.isMDXComponent=!0}}]);